// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class NativeCalculatorPigeonCodecReader: FlutterStandardReader {
}

private class NativeCalculatorPigeonCodecWriter: FlutterStandardWriter {
}

private class NativeCalculatorPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeCalculatorPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeCalculatorPigeonCodecWriter(data: data)
  }
}

class NativeCalculatorPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NativeCalculatorPigeonCodec(readerWriter: NativeCalculatorPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeCalculator {
  func add(a: Int64, b: Int64) throws -> Int64
  func subtract(a: Int64, b: Int64) throws -> Int64
  func divide(a: Int64, b: Int64) throws -> Int64
  func multiply(a: Int64, b: Int64) throws -> Int64
  func addLate(a: Int64, b: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func subtractLate(a: Int64, b: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func divideLate(a: Int64, b: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func multiplyLate(a: Int64, b: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeCalculatorSetup {
  static var codec: FlutterStandardMessageCodec { NativeCalculatorPigeonCodec.shared }
  /// Sets up an instance of `NativeCalculator` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeCalculator?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let addChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.add\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        do {
          let result = try api.add(a: aArg, b: bArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addChannel.setMessageHandler(nil)
    }
    let subtractChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.subtract\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subtractChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        do {
          let result = try api.subtract(a: aArg, b: bArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subtractChannel.setMessageHandler(nil)
    }
    let divideChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.divide\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      divideChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        do {
          let result = try api.divide(a: aArg, b: bArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      divideChannel.setMessageHandler(nil)
    }
    let multiplyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.multiply\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      multiplyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        do {
          let result = try api.multiply(a: aArg, b: bArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      multiplyChannel.setMessageHandler(nil)
    }
    let addLateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.addLate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addLateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        api.addLate(a: aArg, b: bArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addLateChannel.setMessageHandler(nil)
    }
    let subtractLateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.subtractLate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subtractLateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        api.subtractLate(a: aArg, b: bArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      subtractLateChannel.setMessageHandler(nil)
    }
    let divideLateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.divideLate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      divideLateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        api.divideLate(a: aArg, b: bArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      divideLateChannel.setMessageHandler(nil)
    }
    let multiplyLateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.multiplyLate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      multiplyLateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aArg = args[0] as! Int64
        let bArg = args[1] as! Int64
        api.multiplyLate(a: aArg, b: bArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      multiplyLateChannel.setMessageHandler(nil)
    }
  }
}
