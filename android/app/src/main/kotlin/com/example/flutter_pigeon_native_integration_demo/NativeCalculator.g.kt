// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.flutter_pigeon_native_integration_demo

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativeCalculatorPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private open class NativeCalculatorPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return     super.readValueOfType(type, buffer)
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    super.writeValue(stream, value)
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeCalculator {
  fun add(a: Long, b: Long): Long
  fun subtract(a: Long, b: Long): Long
  fun divide(a: Long, b: Long): Long
  fun multiply(a: Long, b: Long): Long
  fun addLate(a: Long, b: Long, callback: (Result<Long>) -> Unit)
  fun subtractLate(a: Long, b: Long, callback: (Result<Long>) -> Unit)
  fun divideLate(a: Long, b: Long, callback: (Result<Long>) -> Unit)
  fun multiplyLate(a: Long, b: Long, callback: (Result<Long>) -> Unit)

  companion object {
    /** The codec used by NativeCalculator. */
    val codec: MessageCodec<Any?> by lazy {
      NativeCalculatorPigeonCodec()
    }
    /** Sets up an instance of `NativeCalculator` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeCalculator?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.add$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.add(aArg, bArg))
            } catch (exception: Throwable) {
              NativeCalculatorPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.subtract$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.subtract(aArg, bArg))
            } catch (exception: Throwable) {
              NativeCalculatorPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.divide$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.divide(aArg, bArg))
            } catch (exception: Throwable) {
              NativeCalculatorPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.multiply$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.multiply(aArg, bArg))
            } catch (exception: Throwable) {
              NativeCalculatorPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.addLate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            api.addLate(aArg, bArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeCalculatorPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeCalculatorPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.subtractLate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            api.subtractLate(aArg, bArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeCalculatorPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeCalculatorPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.divideLate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            api.divideLate(aArg, bArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeCalculatorPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeCalculatorPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.NativeCalculator.multiplyLate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0] as Long
            val bArg = args[1] as Long
            api.multiplyLate(aArg, bArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeCalculatorPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeCalculatorPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class TimerEvents(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by TimerEvents. */
    val codec: MessageCodec<Any?> by lazy {
      NativeCalculatorPigeonCodec()
    }
  }
  fun onTimeElapsed(timeArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_pigeon_native_integration_demo.TimerEvents.onTimeElapsed$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(timeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(NativeCalculatorPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
